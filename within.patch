diff --git a/src/XPathAssert.php b/src/XPathAssert.php
index 6b008bb..35f143b 100644
--- a/src/XPathAssert.php
+++ b/src/XPathAssert.php
@@ -3,6 +3,7 @@ namespace Stein197\PHPUnit;
 
 use Dom\Document;
 use Dom\Node;
+use Dom\NodeList;
 use Dom\XPath;
 use PHPUnit\Framework\AssertionFailedError;
 use PHPUnit\Framework\ExpectationFailedException;
@@ -20,14 +21,15 @@ use function array_map;
 // TODO: assertAnchorExists(string $href, array $query = [], ?string $hash = null)
 // TODO: assertAnchorNotExists(string $href, array $query = [], ?string $hash = null)
 // TODO: assertClassCount(string $class, int $expectedCount)
-// TODO: within(string $xpath, callable $f) - use query(, $contextNode)
+// TODO: Test namespaced XML
 final class XPathAssert {
 
 	private XPath $xpath;
 
 	public function __construct(
 		private TestCase $test,
-		Document $doc
+		private Document $doc,
+		private ?Node $context = null
 	) {
 		$this->xpath = new XPath($doc);
 	}
@@ -43,7 +45,7 @@ final class XPathAssert {
 	 * ```
 	 */
 	public function assertCount(string $xpath, int $expectedCount): void {
-		$length = $this->xpath->query($xpath)->count();
+		$length = $this->query($xpath)->count();
 		$this->test->assertEquals($expectedCount, $length, "Expected to find {$expectedCount} elements matching the xpath \"{$xpath}\", actual: {$length}");
 	}
 
@@ -57,7 +59,7 @@ final class XPathAssert {
 	 * ```
 	 */
 	public function assertExists(string $xpath): void {
-		$length = $this->xpath->query($xpath)->count();
+		$length = $this->query($xpath)->count();
 		$this->test->assertGreaterThan(0, $length, "Expected to find at least one element matching the xpath \"{$xpath}\"");
 	}
 
@@ -88,8 +90,19 @@ final class XPathAssert {
 	public function assertTextEquals(string $xpath, string $text): void {
 		$contents = array_map(
 			fn (Node $node) => $node->textContent,
-			[...$this->xpath->query($xpath)]
+			[...$this->query($xpath)]
 		);
 		$this->test->assertContains($text, $contents, "Expected to find at least one element matching the xpath \"{$xpath}\" and containing the text \"{$text}\"");
 	}
+
+	public function within(string $xpath, callable $f): void {
+		$list = $this->query($xpath);
+		if ($list->count() === 1)
+			$f(new static($this->test, $this->doc, $list->item(0)));
+		$this->test->fail("Expected to find exactly one element matching the xpath \"{$xpath}\", actual: {$list->count()}");
+	}
+
+	private function query(string $xpath): NodeList {
+		return $this->xpath->query($xpath, $this->context);
+	}
 }
diff --git a/test/XPathAssertTest.php b/test/XPathAssertTest.php
index a3af5ff..1a41e28 100644
--- a/test/XPathAssertTest.php
+++ b/test/XPathAssertTest.php
@@ -102,6 +102,26 @@ final class XPathAssertTest extends PHPUnitTestCase implements ExtendedTestCase
 		];
 	}
 
+	#[Test]
+	#[DataProvider('dataWithin')]
+	#[TestDox('within()')]
+	public function testWithin(?string $exceptionMessage, string $content, string $outerXpath, string $innerXpath): void {
+		$this->assert($exceptionMessage, 'html', $content, static function (XPathAssert $assert) use ($outerXpath, $innerXpath): void {
+			$assert->within($outerXpath, function (XPathAssert $assert) use ($innerXpath): void {
+				$assert->assertExists($innerXpath);
+			});
+		});
+	}
+
+	public static function dataWithin(): array {
+		return [
+			'elements == 0' => ['Expected to find exactly one element matching the xpath "//article", actual: 0', '<!DOCTYPE html>', '//article', '/p'],
+			'elements > 1' => ['Expected to find exactly one element matching the xpath "//article", actual: 2', '<!DOCTYPE html><article></article><article></article>', '//article', '/p'],
+			'passed' => [null, '<!DOCTYPE html><body><article><p></p></article></body>', '//article', '/p'],
+			'failed' => ['Expected to find at least one element matching the xpath "//p"', '<!DOCTYPE html><body><article></article></body><p></p>', '//article', '//p'],
+		];
+	}
+
 	private function assert(?string $exceptionMessage, string $format, string $content, callable $f): void {
 		if ($exceptionMessage) {
 			$this->expectException(AssertionFailedError::class);
